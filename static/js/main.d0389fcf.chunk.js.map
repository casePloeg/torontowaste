{"version":3,"sources":["Header.js","SearchBar.js","Star.js","TrashItem.js","ResultsList.js","Favourites.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","e","key","submitSearch","target","value","clearSearch","persist","setState","handleSearch","_this2","type","onKeyUp","event","search","onClick","Star","favClass","fav","TrashItem","handleRemoveFavourite","title","body","handleNewFavourite","handleClick","src_Star","dangerouslySetInnerHTML","__html","ResultsList","resultItems","map","item","src_TrashItem","favourites","findIndex","favItem","Favourites","favItems","Footer","class","href","App","bind","assertThisInitialized","keyword","re","RegExp","results","fetch","then","response","json","myJson","forEach","trashItem","keywords","match","replace","push","prevState","index","splice","src_Header","src_SearchBar","src_ResultsList","length","src_Favourites","src_Footer","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0389fcf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Toronto Waste Lookup</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: \"\"\r\n    };\r\n  }\r\n  search(e) {\r\n    if (e.key === \"Enter\") {\r\n      this.submitSearch();\r\n    } else if (e.target.value === \"\") {\r\n      this.clearSearch();\r\n    } else {\r\n      e.persist();\r\n      // update the value of the text input in the state\r\n      //this.setState;\r\n      this.setState(() => {\r\n        return { input: e.target.value };\r\n      });\r\n    }\r\n  }\r\n\r\n  submitSearch() {\r\n    // return the value of the input box to the app component (make the api call)\r\n    this.props.handleSearch(this.state.input);\r\n  }\r\n\r\n  clearSearch() {\r\n    this.props.clearSearch();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"searchBar\">\r\n        <input type=\"text\" onKeyUp={event => this.search(event)} />\r\n        <button type=\"submit\" onClick={() => this.submitSearch()}>\r\n          <i className=\"fas fa-search fa-2x\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Star extends Component {\r\n  render() {\r\n    // if the item this star is attached to is favourited, the star receives the favourite class\r\n    let favClass = \"\";\r\n    if (this.props.fav) {\r\n      favClass = \"f\";\r\n    }\r\n    return (\r\n      <div className={\"star \" + favClass}>\r\n        <i className=\"fas fa-star\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Star;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Star from \"./Star\";\r\n\r\nclass TrashItem extends Component {\r\n  handleClick() {\r\n    if (this.props.fav) {\r\n      this.props.handleRemoveFavourite({\r\n        title: this.props.title,\r\n        body: this.props.body\r\n      });\r\n    } else {\r\n      this.props.handleNewFavourite({\r\n        title: this.props.title,\r\n        body: this.props.body\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"trashItem\">\r\n        <div className=\"title\">\r\n          <div className=\"star\" onClick={() => this.handleClick()}>\r\n            <Star fav={this.props.fav} />\r\n          </div>\r\n\r\n          <h3>{this.props.title}</h3>\r\n        </div>\r\n\r\n        <div\r\n          className=\"body\"\r\n          dangerouslySetInnerHTML={{ __html: this.props.body }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrashItem;\r\n","import React, { Component } from \"react\";\r\nimport TrashItem from \"./TrashItem\";\r\n\r\nclass ResultsList extends Component {\r\n  render() {\r\n    // create displayable trash item components out of results given throug props\r\n    // an item is a favourite if the object consisting of it's item and body appears in the favourites list\r\n    // titles are unique so they are given as the key. Ids are not used because they seem to be missing from some items in the database\r\n    const resultItems = this.props.resultItems.map(item => (\r\n      <TrashItem\r\n        key={item.title}\r\n        body={item.body}\r\n        title={item.title}\r\n        fav={\r\n          this.props.favourites.findIndex(\r\n            favItem => favItem.title === item.title\r\n          ) > -1\r\n            ? true\r\n            : false\r\n        }\r\n        handleNewFavourite={this.props.handleNewFavourite}\r\n        handleRemoveFavourite={this.props.handleRemoveFavourite}\r\n      />\r\n    ));\r\n    return <div className=\"resultsList\">{resultItems}</div>;\r\n  }\r\n}\r\n\r\nexport default ResultsList;\r\n","import React, { Component } from \"react\";\r\nimport TrashItem from \"./TrashItem\";\r\n\r\nclass Favourites extends Component {\r\n  render() {\r\n    const favItems = this.props.favourites.map(item => (\r\n      <TrashItem\r\n        key={item.title}\r\n        body={item.body}\r\n        title={item.title}\r\n        fav={true}\r\n        handleNewFavourite={this.props.handleNewFavourite}\r\n        handleRemoveFavourite={this.props.handleRemoveFavourite}\r\n      />\r\n    ));\r\n    return (\r\n      <div className=\"favourites\">\r\n        <h2>Favourites</h2>\r\n        {favItems}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Favourites;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <p>\r\n          Made with <i class=\"fas fa-heart\" /> by{\" \"}\r\n          <a href=\"https://caseploeg.com\">Case Ploeg</a>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport SearchBar from \"./SearchBar\";\nimport ResultsList from \"./ResultsList\";\nimport Favourites from \"./Favourites\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      resultItems: [],\n      favourites: []\n    };\n\n    //this.method = this.method.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.clearSearch = this.clearSearch.bind(this);\n    this.handleNewFavourite = this.handleNewFavourite.bind(this);\n    this.handleRemoveFavourite = this.handleRemoveFavourite.bind(this);\n  }\n\n  componentDidMount() {}\n\n  // this method handles the api call, will update the results list\n  handleSearch(keyword) {\n    // create a regex using the keyword given the by user, spaces are required so that words contained in other words aren't matched. ie, rat => crate\n    const re = new RegExp(\".\" + keyword + \".\");\n    let results = [];\n    // make an fetch api call on the toronto waste database\n    fetch(\n      \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\"\n    )\n      .then(function(response) {\n        return response.json();\n      })\n      .then(\n        function(myJson) {\n          myJson.forEach(trashItem => {\n            // if the current trash item contains the keyword given by the user, add this item to the results items that will be displayed to the user\n\n            if (\n              trashItem.keywords.match(re) ||\n              trashItem.title.match(re) ||\n              trashItem.body.match(re)\n            ) {\n              // convert special characters to html tags so that rendering works properly\n              trashItem.body = trashItem.body.replace(/&lt;/g, \"<\");\n              trashItem.body = trashItem.body.replace(/&gt;/g, \">\");\n              trashItem.body = trashItem.body.replace(/&amp;/g, \"&\");\n              trashItem.body = trashItem.body.replace(/&quot;/g, \"\");\n\n              results.push(trashItem);\n            }\n          });\n          this.setState(prevState => (prevState[\"resultItems\"] = results));\n        }.bind(this)\n      );\n  }\n\n  clearSearch() {\n    // clear the result items\n    this.setState(prevState => (prevState[\"resultItems\"] = []));\n  }\n\n  // this method handles the user requesting to add a favourite item\n  handleNewFavourite(item) {\n    // append the given item which includes the title and body text to the favourites state\n    this.setState(prevState => prevState[\"favourites\"].push(item));\n  }\n\n  // this method handles the user requesting to remove a favourited item\n  handleRemoveFavourite(item) {\n    //remove the given id from the favourites state\n    this.setState(prevState => {\n      const index = prevState[\"favourites\"].findIndex(\n        favItem => favItem.title === item.title\n      );\n      if (index > -1) {\n        return prevState[\"favourites\"].splice(index, 1);\n      } else {\n        return prevState;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"App\">\n          <Header />\n          <SearchBar\n            handleSearch={this.handleSearch}\n            clearSearch={this.clearSearch}\n          />\n          <ResultsList\n            handleNewFavourite={this.handleNewFavourite}\n            handleRemoveFavourite={this.handleRemoveFavourite}\n            resultItems={this.state.resultItems}\n            favourites={this.state.favourites}\n          />\n          {// if there is atleast 1 favourited item generate the favourites component\n          this.state.favourites.length > 0 && (\n            <Favourites\n              handleNewFavourite={this.handleNewFavourite}\n              handleRemoveFavourite={this.handleRemoveFavourite}\n              favourites={this.state.favourites}\n            />\n          )}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}